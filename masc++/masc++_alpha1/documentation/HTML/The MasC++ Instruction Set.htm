<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>The MasC++ Instruction Set</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset= Windows-1252">

</head>


<body><FONT face="FixedSys" color="#BD0000"><br><br>
MasC++ supports the following instructions they are defined in masc.h
and can easily add new instructions simply by adding them to the defined enumerated constants , and character array of keyword tokens in the correct order: They look like this:
<br><Br><br>
<pre>
enum TOK_TYPE { TOK_INSERT, TOK_MAIN, TOK_USES, TOK_MAS, TOK_VAR, TOK_BEGIN, TOK_END, TOK_MOV, TOK_ADD,TOK_SUB,TOK_MUL,TOK_DIV,TOK_OR, TOK_XOR,TOK_AND,TOK_NOT,TOK_PUSH,TOK_POP,TOK_INC,TOK_DEC,TOK_CMP,TOK_JMP,TOK_JNE,TOK_JE,TOK_JL,TOK_JG,TOK_JLE,TOK_JGE,TOK_RET, TOK_EXIT,TOK_CALL,TOK_SCAT,TOK_PRINT, TOK_PROC,TOK_IMPLEMENT,TOK_EXTERN,VAR_INTEGER, VAR_STRING, VAR_FLOAT };
static char *tok_array[] = {"insert", "master","uses","mas","var","begin","end","mov","add","sub","mul","div","or","xor","and","not", "push", "pop","inc","dec","cmp","jmp","jne","je","jl","jg","jle","jge","ret","exit","call","scat","print","proc","implement","extern","var&","var$","var#", 0, 0 };</pre><br><br> Each keyword/instruction will be explained statements are sepereated with a semi-colon and comments are terminated from the point of // to the end of the line.<br><b>-Keywords:</b><br><br><b>insert</b> "sourcefile.msrc"; <br>- This keyword will insert one source file directly into another<br><br><b>master</b> ObjectName {} <br>- This keyword is for creating the main object thats constructor is called first. <br><br><b>uses</b>{object;object2;}<br>-The uses keyword is for inhertiance of <b>mas</b> objects it can inhert as many objects as resources allow and executes constructors/destructors from right to left unlike C++ which is left to right<br><br><b>mas</b> ObjectName{}<br>-This is used for objects that contain procedures,external procedures,virtual procedures (implement) variables, and a constructor/destructor<br><br><b>var</b> {} <br>-the <b>var</b> keyword is a block of code which contains a objects variable declerations<br><br><b>var&</b><br>- this stands for integer variable decleration.<br><br><b>var$</b><br>-this stands for string variable declerations<br><br><b>var#</b><br>-this stands for double precesion floating point variables<br><br> <b>*</b> Note: Variable declerations can have initaliziation values the variable name followed by the equal sign (=) and a value.<br><br> <b>begin</b><br>-The <b>begin</b> {} keyword is where a object starts its execution this cannot be left out however the <b> end </b> keyword is not nessicary<br><br><b>end</b><br>-The <b>end</b> {} keyword is for the objects destructor.<br><br><b>proc</b><br>-the proc keyword is for defining a member procedure for a specific <b>mas</b> or <b>master</b> object. if its a mas object the keyword can be preceeded by <b> extern </b> for external (functions in C++)  or <b>implement</b> ( which is virtual procedures to be implemented ) keywords in the <b>master</b> object.<br><br><b>-Instructions</b><br><br>Double operand instructions syntax is the following:<br><br> <b>instruction</b> operand1,operand2;<br><br>Single operand instructions is the following:<br><br><b>instruction</b> operand1;<br><br> The instructions:<br><br><b> *</b>Double operand instructions<br><br><b>mov</b><br>-The mov instruction will move data from one variable to another. Or can move constant data into a variable:<br><br><b>add</b> <b> sub </b> <b> mul </b> <b>div</b> <b>xor </b> <b> or </b> <b> and </b> <br>-the add/sub/mul/div/xor/or/and instructions will do the specific operation (the name of the instruction) on the operands.<br><br><b>cmp</b><br>-The cmp instruction (logical compare) will compare to variables and set the variable flag registers with the results of the operation for use with the looping instructions:<br><b> jne </b> -(jump if not equal)<br><b>je</b> - (jump if equal) <br><b>jl</b> -(jump if less than)<br><b>jle</b> - (jump if less than or equal to)<br><b>jg</b> -(jump if greater than)<br><b>jge</b> -(jump if greater than or equal to)<br><br>instructions for loops syntax is the following<br><br>start:<br>cmp master.var1,master.var2;<br>jne start;<br><br><b>*</b>Single operand instructions:<br><br><b>inc</b> <b>dec</b> <b>not</b><br>- the inc/dec/not instructions will do the specific operation (name of the instruction) on the operands.<br><br><b> push</b> <br>- push instruction will push varaible or constant into the interpreters stack<br><br> <b>pop</b><br>- pop instruction will pop variable from the interpreters stack into the varaible specified by operand1<br><br><b>*</b>Special Instructions (streams)<br><br> unlike the other instructions the <b>print</b> instruction takes two forms. First is like a regular instruction taking one operand. example: <br><br><b>print</b> "hello world";<br><br> The second is using the stream operator &lt;&lt;<br>Example:<br><br><b>print</b> &lt;&lt;  "x = " &lt;&lt; master.x &lt;&lt " y = " &lt;&lt; master.y &lt;&lt " equals x & y variables \n"<b>;</b><br><br> <b>*</b> Note instructions containing streams must be terminated with a semi-colon so they can expand multiple lines.<br><br>The other special instruction is <b>scat</b> which stands for string concatination.<br>Its syntax is the following:<br><br> <b>scat</b> master.variable &lt;&lt; "This is streamed into string variable. " &lt;&lt; master.x &lt;&lt; "\n";<br><br>
than you can do whatever you want with the string including writing it to a file, passing it to a C++ function etc...<br><br>
<br> <br>Well that concludes the documentation on the instructions / keywords. I know its very basic right now but this is my first language so give me some time ....<br><br><br><b>-</b>Jared Bruni =)<br><br>
<a href="Your first Windows MasC++ program.htm"> Previous </a><br>
 </FONT></body>
</html>
